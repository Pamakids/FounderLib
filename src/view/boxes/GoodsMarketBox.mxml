<?xml version="1.0" encoding="utf-8"?>
<components:PopupBox xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:mx="library://ns.adobe.com/flex/mx"
					 xmlns:components="com.pamakids.components.*"
					 skinClass="skins.GMPopupBoxSkin"
					 title="批发市场"
					 removedFromStage="popupbox1_removedFromStageHandler(event)"
					 creationComplete="popupbox1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.pamakids.components.PAlert;
			import com.pamakids.events.ODataEvent;
			import com.pamakids.utils.CloneUtil;

			import mx.collections.ArrayCollection;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;

			import spark.components.Group;
			import spark.events.IndexChangeEvent;

			import controller.Help;
			import controller.ServiceController;

			import model.BoughtGoodsVO;
			import model.StaffVO;

			private var purchaseAC:ArrayCollection;
			private var sc:ServiceController;

			protected function popupbox1_creationCompleteHandler(event:FlexEvent):void
			{
//				addEventListener('close', closeHandler);
				sc=ServiceController.instance;

				var ac:ArrayCollection=new ArrayCollection(['水果', '饮料', '蔬菜', '日用品']);
				goodsTypes.dataProvider=ac;
				goods=new ArrayCollection(sc.goodsDic['水果']);

				sc.addEventListener('selectedGoods', selectedHandler);
				sc.addEventListener('removeGoods', removeHandler);
				sc.addEventListener('quantityChanged', changedHandler);
				sc.addEventListener('CLEAR_PRODUCT', clearHandler);

				boughtGoods=new ArrayCollection();
				updateHasBought();
				if (sc.fighting)
					return;
				Help.instance.showHelp('采购的物品可以直接在购物车修改数量\n物品种类越多越容易销售成功，但不可超出23种\n如果数量不足以满足顾客所需会导致交易失败');

//				{'购物车 已购('+sc.boughtGoods.length+')'}
			}

			[Bindable]
			private var goods:ArrayCollection;

//			protected function closeHandler(event:Event):void
//			{
//				close();
//			}

			protected function goodsTypes_changeHandler(event:IndexChangeEvent):void
			{
				goods=new ArrayCollection(sc.goodsDic[goodsTypes.selectedItem]);
			}

			protected function selectedHandler(event:ODataEvent):void
			{
				var bo:BoughtGoodsVO=CloneUtil.convertObject(event.data, BoughtGoodsVO) as BoughtGoodsVO;
				var added:Boolean;
				for each (var vo:BoughtGoodsVO in boughtGoods)
				{
					if (vo.id == bo.id)
					{
						added=true;
						break;
					}
				}
				if (!added)
				{
					updateHasBought();
					var haveBought:Boolean;
					if (sc.boughtGoods)
					{
						for each (var bvo:BoughtGoodsVO in sc.boughtGoods)
						{
							if (bvo.id == bo.id)
							{
								haveBought=true;
								break;
							}
						}
					}
					if (typeNum < 23 || haveBought)
						boughtGoods.addItemAt(bo, 0);
					else
						PAlert.show('物品种类不可超出23种，无法再添加物品到购物车，请清除库存物品或删除购物车物品后再试');
				}
				else
				{
					vo.quantity++;
				}
				caculate();
				updateHasBought();
			}

			[Bindable]
			public var shopCartTotal:int;

			private var totalNum:int;

			[Bindable]
			private var typeNum:int;

			private function caculate():void
			{
				var total:int;
				totalNum=0;
				for each (var vo:BoughtGoodsVO in boughtGoods)
				{
					total+=vo.inPrice * vo.quantity;
					totalNum+=vo.quantity;
				}
				shopCartTotal=total;
			}

			protected function removeHandler(event:ODataEvent):void
			{
				boughtGoods.removeItem(event.data);
				caculate();
				updateHasBought();
			}

			[Bindable]
			private var boughtGoods:ArrayCollection;

			protected function changedHandler(event:Event):void
			{
				caculate();
			}

			protected function buy_clickHandler(event:MouseEvent):void
			{
				var svo:StaffVO=sc.player1.getStaff(1) ? sc.player1.getStaff(1) : sc.selectedPurchaserStaff;
				if (shopCartTotal > sc.player1.money)
				{
					PAlert.show('现金不足');
				}
				else if (totalNum + sc.purchaseNumEachRound > svo.ability)
				{
					PAlert.show('采购数量超出采购员每月最大采购的数量，请减少本次购买数\n本月最大购买数：' + svo.ability + ' 本月最多可再购买：' + (svo.ability - sc.purchaseNumEachRound));
				}
				else
				{
					checkTypeNum();
					if (typeNum > 23)
					{
						PAlert.show('抱歉，您所购买的物品不能超出23类，请删除' + (typeNum - 23) + '种物品');
						return;
					}
					sc.purchaseNumEachRound+=totalNum;
					sc.checkOut(boughtGoods.source, shopCartTotal);
					close();
//					closeHandler(null);
				}
			}

			protected function clearHandler(event:Event):void
			{
				updateHasBought();
			}

			private function updateHasBought():void
			{
//				if (sc.boughtGoods)
//				{
				checkTypeNum();
				if (typeNum)
					carTitle.text='购物车 货品种类(' + typeNum + ')';
				else
					carTitle.text='购物车';
//				}
			}

			private function checkTypeNum():void
			{
				if (sc.boughtGoods)
				{
					typeNum=sc.boughtGoods.length;
					for each (var bg:BoughtGoodsVO in boughtGoods)
					{
						var has:Boolean=false;
						for each (var bg2:BoughtGoodsVO in sc.boughtGoods)
						{
							if (bg2.id == bg.id)
							{
								has=true;
								break;
							}
						}
						if (!has)
							typeNum++;
					}
				}
				else if (boughtGoods)
				{
					typeNum=boughtGoods.length;
				}
				else
				{
					typeNum=0;
				}
			}

			protected function popupbox1_removedFromStageHandler(event:Event):void
			{
				sc.removeEventListener('selectedGoods', selectedHandler);
				sc.removeEventListener('removeGoods', removeHandler);
				sc.removeEventListener('quantityChanged', changedHandler);
				sc.removeEventListener('CLEAR_PRODUCT', clearHandler);
				sc=null;
			}
		]]>
	</fx:Script>

	<s:ButtonBar skinClass="skins.DefaultButtonBarSkin"
				 horizontalCenter="0"
				 requireSelection="true"
				 change="goodsTypes_changeHandler(event)"
				 y="35	"
				 id="goodsTypes"/>

	<s:HGroup width="100%"
			  paddingLeft="30"
			  paddingRight="30"
			  y="90">
		<s:List id="goodsList"
				skinClass="skins.DefaultListSkin"
				width="260"
				itemRenderer="renderers.GoodsItem"
				height="240"
				dataProvider="{goods}"/>
		<s:VGroup horizontalAlign="center"
				  width="280">
			<s:Label text="购物车"
					 id="carTitle"
					 fontSize="18"
					 color="0x975c25"/>
			<s:List id="shopCart"
					dataProvider="{boughtGoods}"
					skinClass="skins.DefaultListSkin"
					itemRenderer="renderers.ShopCartRenderer"
					width="260"
					height="165"/>
			<s:BitmapImage source="@Embed('/assets/boxes/cartLine.png')"/>

			<s:HGroup verticalAlign="middle"
					  gap="18">
				<s:Label id="total"
						 text="{'总金额：'+ shopCartTotal}"
						 color="0xfe840c"
						 fontSize="18"/>
				<s:Button skinClass="skins.DefaultButtonBigSkin"
						  id="buy"
						  click="buy_clickHandler(event)"
						  label="结算"/>
			</s:HGroup>

		</s:VGroup>
	</s:HGroup>

</components:PopupBox>
